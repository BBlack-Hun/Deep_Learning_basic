{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Jenghun Kim - _8 오차역전파 (Backpropagation)","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"S9Db_VsP_m1S"},"source":["## 오차역전파 (Backpropagation)\n"]},{"cell_type":"markdown","metadata":{"id":"8Vdi2PAG_3lW"},"source":["### 오차역전파 알고리즘\n","- 학습 데이터로 정방향(forward) 연산을 통해 손실함수 값(loss)을 구함\n","\n","- 각 layer별로 역전파학습을 위해 중간값을 저장\n","\n","- 손실함수를 학습 파라미터(가중치, 편향)로 미분하여  \n","  마지막 layer로부터 앞으로 하나씩 연쇄법칙을 이용하여 미분\n","  각 layer를 통과할 때마다 저장된 값을 이용\n","\n","- 오류(error)를 전달하면서 학습 파라미터를 조금씩 갱신\n"]},{"cell_type":"markdown","metadata":{"id":"-o545ezeUuSB"},"source":["### 오차역전파 학습의 특징\n","- 손실함수를 통한 평가를 한 번만 하고, 연쇄법칙을 이용한 미분을 활용하기 때문에  \n","  학습 소요시간이 매우 단축!\n","\n","- 미분을 위한 중간값을 모두 저장하기 때문에 메모리를 많이 사용\n"]},{"cell_type":"markdown","metadata":{"id":"CFoTt-ds_w8C"},"source":["### 신경망 학습에 있어서 미분가능의 중요성\n","- 경사하강법(Gradient Descent)에서 손실 함수(cost function)의 최소값,  \n","  즉, 최적값을 찾기 위한 방법으로 미분을 활용\n","\n","- 미분을 통해 손실 함수의 학습 매개변수(trainable parameter)를 갱신하여  \n","  모델의 가중치의 최적값을 찾는 과정\n","\n","![](https://i.pinimg.com/originals/5d/13/20/5d1320c7b672710834e63b95a7c1037b.png)\n","\n","<sub>출처: https://www.pinterest.co.kr/pin/424816177350692379/</sub>"]},{"cell_type":"markdown","metadata":{"id":"ilYRMqLeQf6Z"},"source":["### 합성함수의 미분 (연쇄법칙, chain rule)\n","\n","## $\\qquad \\frac{d}{dx} [f(g(x))] = f^\\prime(g(x))g^\\prime(x)$  \n"," \n","\n","- 여러 개 연속으로 사용가능  \n","  ## $ \\quad \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial u} \\times \\frac{\\partial u}{\\partial m} \\times \\frac{\\partial m}{\\partial n} \\times \\ ... \\ \\frac{\\partial l}{\\partial k} \\times \\frac{\\partial k}{\\partial g} \\times \\frac{\\partial g}{\\partial x} \n","  $\n","- 각각에 대해 편미분 적용가능\n","\n","![](https://cdn-media-1.freecodecamp.org/images/1*_KMMFvRP5X9kC59brI0ykw.png)\n","<sub>출처: https://www.freecodecamp.org/news/demystifying-gradient-descent-and-backpropagation-via-logistic-regression-based-image-classification-9b5526c2ed46/</sub>\n","\n","- **오차역전파의 직관적 이해**\n","  - 학습을 진행하면서, 즉 손실함수의 최소값(minimum)을 찾아가는 과정에서 가중치 또는 편향의 변화에 따라 얼마나 영향을 받는지 알 수 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6NLF8CXiQkuL"},"source":["#### 합성함수 미분(chain rule) 예제\n","\n","![](https://miro.medium.com/max/1000/1*azqHvbrNsZ8AIZ7H75tbIQ.jpeg)\n","\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>\n","\n","  #### $\\quad a=-1, \\ b=3, \\ c=4$,\n","  #### $\\quad x = a + b, \\ y = b + c, \\ f = x * y \\ 일 때$    \n","\n","\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial x} &=& y\\ + \\ x \\ \\frac{\\partial y}{\\partial x} \\\\\n","  &=& (b \\ + \\ c) \\ + \\ (a \\ +\\ b)\\ \\times \\ 0 \\\\\n","  &=& 7 \\end{matrix}$\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial y} &=& x\\ + \\ \\frac{\\partial x}{\\partial y} \\ y \\\\\n","  &=& (a \\ + \\ b) \\ + \\ 0 \\times (b \\ +\\ c) \\\\\n","  &=& 2 \\end{matrix}$\n","\n","   <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial x}{\\partial a} &=& 1 \\ + \\ a \\ \\frac{\\partial b}{\\partial a} \\\\\n","  &=& 1 \\end{matrix} $\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial y}{\\partial c} &=& \\frac{\\partial b}{\\partial c}\\ + 1 \\\\\n","   &=& 1 \\end{matrix} $\n","  \n","  <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial a} &=& \\frac{\\partial f}{\\partial x} \\times \\frac{\\partial x}{\\partial a} \\\\\n","  &=& y \\times 1 \\\\ \n","  &=& 7 \\times 1 = 7 \\\\\n","  &=& 7  \\end{matrix} $\n","    \n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial b}\\ \n","  &=& \\frac{\\partial x}{\\partial b} \\ y \\ + \\ x \\ \\frac{\\partial y}{\\partial b}  \\\\\n","  &=& 1 \\times 7 + 2 \\times 1  \\\\\n","  &=& 9 \\end{matrix} $\n","  \n","\n","  \n","  "]},{"cell_type":"markdown","metadata":{"id":"2PgmdJN0Qtdw"},"source":["### 덧셈, 곱셈 계층의 역전파\n","- 위 예제를 통해 아래 사항을 알 수 있음\n","\n","  #### 1. $\\quad z = x + y$ 일 때,\n","  ## $\\frac{\\partial z}{\\partial x} = 1, \\frac{\\partial z}{\\partial y} = 1 $\n","\n","  #### 2. $\\quad t = xy$ 일 때,\n","  ## $\\frac{\\partial t}{\\partial x} = y, \\frac{\\partial t}{\\partial y} = x$\n"]},{"cell_type":"code","metadata":{"id":"hShSxvW5WMqi"},"source":["class Mul():\n","  def __init__(self):\n","    self.x = None\n","    self.y = None\n","  \n","  def forward(self, x, y):\n","    self.x = x\n","    self.y = y\n","    result = x * y\n","    return result\n","\n","  def backward(self, dresult):\n","    dx = dresult * self.y\n","    dy = dresult * self.x\n","    return dx, dy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1bovOx6UQvLP"},"source":["class Add():\n","  def __init__(self):\n","    self.x = None\n","    self.y = None\n","\n","  def forward(self, x, y):\n","    self.x = x \n","    self.y = y\n","    result = x + y\n","    return result\n","\n","  def backward(self, dresult):\n","    dx = dresult * 1\n","    dy = dresult * 1\n","    return dx, dy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e3RawqlUQwp0"},"source":["a, b, c = -1, 3, 4\n","x = Add()\n","y = Add()\n","f = Mul()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"soyk-HWiSnwh","executionInfo":{"status":"ok","timestamp":1601223501641,"user_tz":-540,"elapsed":698,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"0f72797b-5454-451e-c7ab-185fbe5006c5","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["x_result = x.forward(a, b)\n","y_result = y.forward(b, c)\n","\n","print(x_result)\n","print(y_result)\n","print(f.forward(x_result, y_result))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n","7\n","14\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FhPPrFIqSpq1","executionInfo":{"status":"ok","timestamp":1601223503091,"user_tz":-540,"elapsed":785,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"7f2a9ca3-f04e-45bd-a669-84feb2d4f129","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["dresult = 1\n","dx_mul, dy_mul = f.backward(dresult)\n","\n","da_add, db_add_1 = x.backward(dx_mul)\n","db_add_2, dc_add = y.backward(dy_mul)\n","\n","print(dx_mul, dy_mul)\n","print(da_add)\n","print(db_add_1 + db_add_2)\n","print(dc_add)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["7 2\n","7\n","9\n","2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dMfl0J1uWgiY"},"source":["![](https://miro.medium.com/max/2000/1*U3mVDYuvnaLhJzIFw_d5qQ.png)\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>"]},{"cell_type":"markdown","metadata":{"id":"byODNRUF5fbv"},"source":["### 활성화 함수(Activation)에서의 역전파"]},{"cell_type":"markdown","metadata":{"id":"OkRurUgm5hqn"},"source":["#### 시그모이드(Sigmoid) 함수\n","\n","![](https://media.geeksforgeeks.org/wp-content/uploads/20190911181329/Screenshot-2019-09-11-18.05.46.png)\n","\n","<sub>출처: https://www.geeksforgeeks.org/implement-sigmoid-function-using-numpy/</sub>\n","\n","- 수식 \n","  # $\\quad y = \\frac{1}{1 + e^{-x}} $일 때,\n","\n","  ## $\\quad \\begin{matrix}y' &=& (\\frac{1}{1 + e^{-x}})' \\\\\n","  &=& \\frac{-1}{(1 + e^{-x})^2}\\ \\times \\ (-e^{-x}) \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ \\frac{e^{-x}}{1 + e^{-x}} \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ (1 - \\frac{1}{1 + e^{-x}}) \\\\\n","  &=& y\\ (1\\ - \\ y)\n","  \\end{matrix}$"]},{"cell_type":"code","metadata":{"id":"DNWIw7ElVhLK"},"source":["import numpy as np\n","\n","class Sigmoid():\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","  \n","  def backward(self, dout):\n","    dx = dout *  (1.0 - self.out) * self.dout\n","    return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWZ247xo5mtv"},"source":["#### ReLU 함수\n","\n","![](https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2018/10/Line-Plot-of-Rectified-Linear-Activation-for-Negative-and-Positive-Inputs.png)\n","\n","<sub>출처: https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/</sub>\n","\n","\n","- 수식  \n","\n","  ### $\\qquad y=\n","  \\begin{cases}\n","  x & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$ 일 때,\n","\n","  <br>\n","\n","  ### $\\qquad \\frac{\\partial y}{\\partial x}=\n","  \\begin{cases}\n","  1 & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$"]},{"cell_type":"code","metadata":{"id":"hHcPmAzh5nOZ"},"source":["class ReLU():\n","\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    self.mask = (x < 0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return 0\n","\n","  def backward(self, dout):\n","    dout[self.mask] = 0\n","    dx = dout\n","    return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MH_kQzedJFfw"},"source":["### 행렬 연산에 대한 역전파\n","\n","# $\\qquad Y = X \\bullet W + B$"]},{"cell_type":"markdown","metadata":{"id":"W-SedVrpJILw"},"source":["#### 순전파(forward)\n","  \n","  - 형상(shape)을 맞춰줘야함\n","  - 앞서 봤던 곱셈, 덧셈 계층을 합친 형태"]},{"cell_type":"code","metadata":{"id":"QKIO7EzSJGD1","executionInfo":{"status":"ok","timestamp":1601223510906,"user_tz":-540,"elapsed":961,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"a5c4564d-0932-4791-a6b2-1b536509691b","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["X = np.random.rand(3)\n","W = np.random.rand(3, 2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(3,)\n","(3, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tqvl76fFJNfU","executionInfo":{"status":"ok","timestamp":1601223511193,"user_tz":-540,"elapsed":379,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"9aeaffa3-948d-4069-aa2a-c202535be7e4","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Y = np.dot(X, W) + B\n","print(Y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vTjJIvg9JPMV","executionInfo":{"status":"ok","timestamp":1601223512797,"user_tz":-540,"elapsed":844,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"78c6a2e6-a788-4eb3-a638-aca27992d047","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["X = np.random.rand(3)\n","W = np.random.rand(2, 2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(3,)\n","(2, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QnB0hE6YJQuD","executionInfo":{"status":"error","timestamp":1601223513973,"user_tz":-540,"elapsed":514,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"7692052e-e3b7-4c4d-d757-4338cec5985c","colab":{"base_uri":"https://localhost:8080/","height":215}},"source":["Y = np.dot(X, W) + B\n","print(Y.shape)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-69-d3f622c411a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mW\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)"]}]},{"cell_type":"markdown","metadata":{"id":"04GHZHAiJUGl"},"source":["#### 역전파(1)\n","\n","##  $\\  Y = X \\bullet W$\n","- $X :\\ \\ (2,\\ )$\n","\n","- $W :\\ \\ (2,\\ 3)$\n","\n","- $X \\bullet W :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial Y} :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial X} = \\frac{\\partial L}{\\partial Y}\\bullet W^T ,\\ (2,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial W} = X^T \\bullet \\frac{\\partial L}{\\partial Y} ,\\ (2,\\ 3)$\n","\n"]},{"cell_type":"code","metadata":{"id":"DCruMHCGJSHK","executionInfo":{"status":"ok","timestamp":1601223518534,"user_tz":-540,"elapsed":898,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"51b24a0a-5c59-4bdb-d67a-de9369aeb4d6","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["X = np.random.randn(2)\n","W = np.random.randn(2, 3)\n","Y = np.dot(X, W)\n","\n","print(\"X\\n{}\".format(X))\n","print(\"W\\n{}\".format(W))\n","print(\"Y\\n{}\".format(Y))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X\n","[0.67664376 1.96365974]\n","W\n","[[ 0.32521932 -0.25778213  0.98536683]\n"," [ 1.32144607  0.6735354  -0.03563759]]\n","Y\n","[2.81492807 1.14816767 0.59676222]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TEvyFXedJWC7","executionInfo":{"status":"ok","timestamp":1601223520703,"user_tz":-540,"elapsed":951,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"1a7b4193-287a-47ad-afd9-5033b6d9845f","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["dL_dY = np.random.randn(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1, 1), dL_dY.reshape(1,-1))\n","\n","print(\"dL_dY\\n{}\".format(dL_dY))\n","print(\"dL_dX\\n{}\".format(dL_dX))\n","print(\"dL_dW\\n{}\".format(dL_dW))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dL_dY\n","[0.04948136 0.26305392 1.3253155 ]\n","dL_dX\n","[1.25420363 0.19533203]\n","dL_dW\n","[[0.03348125 0.17799379 0.89676646]\n"," [0.09716456 0.51654839 2.60246868]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uuOVqySWJauS"},"source":["#### 역전파(2)\n","\n","## $\\ (2)\\  Y = X \\bullet W + B$\n","- $X, W$는 위와 동일\n","\n","- $B: \\ (3, )$\n","\n","- $\\frac{\\partial L}{\\partial B} = \\frac{\\partial L}{\\partial Y}, \\ (3,\\ )$"]},{"cell_type":"code","metadata":{"id":"D_Jb9sY8JYGB","executionInfo":{"status":"ok","timestamp":1601223525569,"user_tz":-540,"elapsed":915,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"e45ae029-0f43-4a73-dac4-e060c1c568dd","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X = np.random.randn(2)\n","W = np.random.randn(2, 3)\n","B = np.random.randn(3)\n","Y = np.dot(X, W) + B\n","print(Y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.39542999 0.01906099 0.23656764]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"frdvKz8oJcoZ","executionInfo":{"status":"ok","timestamp":1601223526906,"user_tz":-540,"elapsed":866,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"b3bc09bd-0b99-4589-dcae-eed82c9290c5","colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["dL_dY = np.random.randn(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1, 1), dL_dY.reshape(1, -1))\n","dL_dB = dL_dY\n","\n","print(\"dL_dY\\n{}\".format(dL_dY))\n","print(\"dL_dX\\n{}\".format(dL_dX))\n","print(\"dL_dW\\n{}\".format(dL_dW))\n","print(\"dL_dB\\n{}\".format(dL_dB))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dL_dY\n","[-1.91686955  0.96419465 -1.08202212]\n","dL_dX\n","[-2.15870428 -3.76201414]\n","dL_dW\n","[[-0.80657174  0.40570949 -0.4552884 ]\n"," [-0.83168414  0.41834114 -0.46946368]]\n","dL_dB\n","[-1.91686955  0.96419465 -1.08202212]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0FrBSUsRJgFl"},"source":["#### 배치용 행렬 내적 계층\n","- N개의 데이터에 대해,  \n","# $\\qquad Y = X \\bullet W + B$\n","\n","  - $X : \\quad  (N,\\ 3)$\n","\n","  - $W : \\quad  (3,\\ 2)$\n","\n","  - $B : \\quad  (2,\\ )$\n","  "]},{"cell_type":"code","metadata":{"id":"AoWx5fDnJd-2","executionInfo":{"status":"ok","timestamp":1601223529915,"user_tz":-540,"elapsed":789,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"d6a34e42-85b6-4eee-cabe-4c504b8739d5","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["X = np.random.rand(4, 3)\n","W = np.random.rand(3, 2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(4, 3)\n","(3, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EqhSX54BJmPQ","executionInfo":{"status":"ok","timestamp":1601223530833,"user_tz":-540,"elapsed":512,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"0c7fbebb-da60-42ff-a49b-a780aa9fecd4","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["print(\"X\\n{}\".format(X))\n","print(\"Y\\n{}\".format(W))\n","print(\"B\\n{}\".format(B))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X\n","[[0.43315276 0.50300221 0.46147919]\n"," [0.41870395 0.37561131 0.57819234]\n"," [0.35758739 0.58965466 0.51992317]\n"," [0.35321083 0.78477693 0.04287021]]\n","Y\n","[[0.26956115 0.49545203]\n"," [0.91277095 0.07207291]\n"," [0.58373238 0.17005368]]\n","B\n","[0.01218141 0.86669347]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_1IOOfhuJqF-","executionInfo":{"status":"ok","timestamp":1601223532071,"user_tz":-540,"elapsed":598,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"33d3fd7e-a92b-400f-9296-da371dbfc833","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["Y = np.dot(X, W) + B\n","\n","print(\"Y\\n{}\".format(Y))\n","print(\"Y.shape\\n{}\".format(Y.shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Y\n","[[0.85744871 1.19602896]\n"," [0.80540441 1.19953633]\n"," [0.95028871 1.17477385]\n"," [0.84873963 1.10554389]]\n","Y.shape\n","(4, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TOKsN2NHJrqT","executionInfo":{"status":"ok","timestamp":1601223533000,"user_tz":-540,"elapsed":464,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"32f3a708-2142-4264-adc0-0a112e2b54ef","colab":{"base_uri":"https://localhost:8080/","height":272}},"source":["dL_dY = np.random.randn(4,2)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_DW = np.dot(X.T, dL_dY)\n","dL_dB = np.sum(dL_dY, axis=0)\n","\n","print('dL_dY\\n{}'.format(dL_dY))\n","print('dL_dX\\n{}'.format(dL_dX))\n","print('dL_dW\\n{}'.format(dL_dW))\n","print('dL_dB\\n{}'.format(dL_dB))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dL_dY\n","[[ 0.45015576 -0.37107517]\n"," [ 0.62067971 -0.33626744]\n"," [ 0.98702973 -1.14665861]\n"," [ 0.58758986 -1.26790326]]\n","dL_dX\n","[[-6.25054372e-02  3.84144638e-01  1.99667798e-01]\n"," [ 7.06751999e-04  5.42302634e-01  3.05127328e-01]\n"," [-3.02049463e-01  8.18289042e-01  3.81167696e-01]\n"," [-4.69793842e-01  4.44953473e-01  1.27383607e-01]]\n","dL_dW\n","[[-0.80657174  0.40570949 -0.4552884 ]\n"," [-0.83168414  0.41834114 -0.46946368]]\n","dL_dB\n","[ 2.64545506 -3.12190447]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YjIYrXGaJtEz"},"source":["class Layer():\n","  def __init__(self):\n","    self.W = np.random.randn(3, 2)\n","    self.b = np.random.randn(2)\n","    self.x = None\n","    self.dW = None\n","    self.db = None\n","\n","  def forward(self, x):\n","    self.x = x\n","    out = np.dot(x, self.W), + self.b\n","    return out\n","\n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dW = np.dot(self.x.T, dout)\n","    self.db = np.sum(dout, axis=0)\n","    return dx"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"twG43EylJvC-"},"source":["np. random.seed(111)\n","\n","layer = Layer()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CrCDxHw5Jw3S","executionInfo":{"status":"ok","timestamp":1601223551120,"user_tz":-540,"elapsed":1299,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"b0972269-d347-46de-c016-838a1ea50dc5","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["X = np.random.randn(2, 3)\n","Y = layer.forward(X)\n","\n","print(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[-0.73552305 -1.18393989  0.23889413]\n"," [-0.58992026 -1.44058512  0.77370311]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"boKm8OIgJyJy","executionInfo":{"status":"ok","timestamp":1601223552025,"user_tz":-540,"elapsed":396,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"791730b8-92dd-4dcb-f840-48d408849213","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["dout = np.random.rand(2,2)\n","dout_dx = layer.backward(dout)\n","\n","print(dout_dx)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[-0.48312871  0.65565961 -0.42154775]\n"," [ 0.26232888 -0.20943773 -0.47209477]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Bz-0zFPpJ3Jz"},"source":["### MNIST 분류 with 역전파\n"]},{"cell_type":"markdown","metadata":{"id":"eW3InPxBJ6qo"},"source":["#### Modules Import"]},{"cell_type":"code","metadata":{"id":"ZKtAhkm4J2Z3","executionInfo":{"status":"ok","timestamp":1601298221161,"user_tz":-540,"elapsed":940,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-whitegrid'])\n","from collections import OrderedDict"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F1_2_jGMKGiT"},"source":["#### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"S3SQq80sJ8mR","executionInfo":{"status":"ok","timestamp":1601298223765,"user_tz":-540,"elapsed":1415,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["np.random.seed(42)\n","\n","mnist = tf.keras.datasets.mnist\n","\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","num_classes = 10"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mv_pjKdxKKIy"},"source":["#### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"B95lI86tKIyY","executionInfo":{"status":"ok","timestamp":1601298224849,"user_tz":-540,"elapsed":1171,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["X_train, X_test = X_train.reshape(-1, 28 * 28).astype(np.float32), X_test.reshape(-1, 28*28).astype(np.float32)\n","\n","X_train /= .255\n","X_test /= .255\n","\n","y_train = np.eye(num_classes)[y_train]"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"ar7DZIlMKLjJ","executionInfo":{"status":"ok","timestamp":1601298226217,"user_tz":-540,"elapsed":585,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"ae41d9b9-9b53-4f06-dd22-5abd8ce1b763","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["(60000, 784)\n","(60000, 10)\n","(10000, 784)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oye4pC82KPbg"},"source":["#### Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"rFeXORJjKM7s","executionInfo":{"status":"ok","timestamp":1601298228524,"user_tz":-540,"elapsed":1225,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["epochs = 1000\n","learning_rate = 1e-3\n","batch_size = 100\n","train_size = X_train.shape[0]"],"execution_count":28,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIdzuyRDKSm0"},"source":["#### Util Functions"]},{"cell_type":"code","metadata":{"id":"8E2_fN1dKRzv","executionInfo":{"status":"ok","timestamp":1601298368022,"user_tz":-540,"elapsed":1693,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["def softmax(x):\n","  if x.ndim == 2:\n","    x = x.T\n","    x = x - np.max(x, axis = 0)\n","    y = np.exp(x) / np.sum(np.exp(x), axis=0)\n","    return y.T\n","\n","  x=  x - np.max(x)\n","  return np.exp(x) / np.sum(xp.exp(x))\n","\n","def mean_squared_error(pred_y, true_y):\n","  return 0.5 * np.sum((pred_y -true_y) **2)\n","\n","def cross_entropy_error(pred_y, true_y):\n","  if pred_y.ndim == 1:\n","    true_y = true_y.reshape(1, true_y.size)\n","    pred_y  = pred_y.reshape(1, pred_y.size)\n","\n","  if true_y.size == pred_y.size:\n","    true_y = true_y.argmax(axis=1)\n","  \n","  batch_size = pred_y.shape[0]\n","  return -np.sum(np.log(pred_y[np.arange(batch_size), true_y] + 1e-7)) / batch_size\n","\n","def softmax_loss(X, true):\n","  pred_y = softmax(X)\n","  return cross_entropy_error(pred_y, true_y)"],"execution_count":45,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SBvWUNh-KY2R"},"source":["#### Util Classes"]},{"cell_type":"markdown","metadata":{"id":"rc0sLXWJs8Dq"},"source":["##### ReLU"]},{"cell_type":"code","metadata":{"id":"ej2m6Robs-uJ","executionInfo":{"status":"ok","timestamp":1601298230779,"user_tz":-540,"elapsed":1364,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class ReLU():\n","  def __init__(self):\n","    self.out = None\n","  \n","  def forward(self, x):\n","    self.mask = (x < 0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return out\n","\n","  def backward(self, dout):\n","    dout[self.mask] = 0\n","    dx = dout\n","    return dx"],"execution_count":30,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RucLfG0EtYcf"},"source":["##### Sigmoid"]},{"cell_type":"code","metadata":{"id":"TWoPmtpNtZ__","executionInfo":{"status":"ok","timestamp":1601298231412,"user_tz":-540,"elapsed":774,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class Sigmoid():\n","\n","  def __init__(self):\n","    self.out = None\n","  \n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","\n","  def backward(self, dout):\n","    dx = dout * (1.0 - self.out) * self.dout\n","    return dx"],"execution_count":31,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZZeNtd-tuM5"},"source":["##### Layer"]},{"cell_type":"code","metadata":{"id":"NEcCZ4bFtzgq","executionInfo":{"status":"ok","timestamp":1601298506764,"user_tz":-540,"elapsed":1381,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class Layer():\n","\n","  def __init__(self, W, b):\n","    self.W = W\n","    self.b = b\n","\n","    self.x = None\n","    self.origin_x_shape = None\n","\n","    self.dL_dW = None\n","    self.dL_db = None\n","\n","  def forward(self, x):\n","    self.origin_x_shape = x.shape\n","\n","    x = x.reshape(x.shape[0], -1)\n","    self.x = x\n","    out = np.dot(self.x, self.W) + self.b\n","\n","    return out\n","\n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dL_dW = np.dot(self.x.T, dout)\n","    self.dL_db = np.sum(dout, axis=0)\n","    dx = dx.reshape(*self.origin_x_shape)\n","    return dx"],"execution_count":63,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s1Yqp7kVvOoD"},"source":["#### Softmax"]},{"cell_type":"code","metadata":{"id":"0RXBVEMdvP9r","executionInfo":{"status":"ok","timestamp":1601298235216,"user_tz":-540,"elapsed":1090,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class Softmax():\n","\n","  def __init__(self):\n","    self.loss = None\n","    self.y = None\n","    self.t = None\n","\n","  def forward(self, x, t):\n","    self.t = t\n","    self.y =softmax(x)\n","    self.loss =  cross_entropy_error(self.y, self.t)\n","\n","    return self.loss\n","\n","  def backward(self, dout=1):\n","    batch_size = self.t.shape[0]\n","\n","    if self.t.size == self.y.size:\n","      dx = (self.y - self.t) / batch_size\n","    else:\n","      dx = self.y.copy()\n","      dx[np.arange(batch_sie), self.t] -= 1\n","      dx = dx / batch_size\n","    \n","    return dx\n"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"sX4I-bKfuRaq","executionInfo":{"status":"ok","timestamp":1601298661219,"user_tz":-540,"elapsed":1353,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class MyModel():\n","\n","  def __init__(self, input_size, hidden_size_list, output_size, activation ='relu'):\n","    self.input_size = input_size\n","    self.output_size = output_size\n","    self.hidden_size_list = hidden_size_list\n","    self.hidden_layer_num = len(hidden_size_list)\n","    self.params = {}\n","\n","    self.__init_weights(activation)\n","\n","    activation_layer = {'sigmoid': Sigmoid, 'relu':ReLU}\n","    self.layers = OrderedDict()\n","    for idx in range(1, self.hidden_layer_num + 1):\n","      self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","      self.layers['Activation_function' + str(idx)] = activation_layer[activation]()\n","    \n","    idx = self.hidden_layer_num + 1\n","\n","    self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","\n","    self.last_layer = Softmax()\n","\n","  def __init_weights(self, activation):\n","    weight_std = None\n","    all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","    for idx in range(1, len(all_size_list)):\n","      if activation.lower() == 'relu':\n","        weight_std = np.sqrt(2.0 / self.input_size)\n","      elif activation.lower() == 'sigmoid':\n","        weight_std = np.sqrt(1.0 / self.input_size)\n","\n","      self.params['W' + str(idx)] = weight_std * np.random.randn(all_size_list[idx-1], all_size_list[idx])\n","      self.params['b' + str(idx)] = np.random.randn(all_size_list[idx])\n","\n","  def predict(self, x):\n","    for layer in self.layers.values():\n","      #print(layer)\n","      x = layer.forward(x)\n","\n","    return x\n","\n","  def loss(self, x, true_y):\n","    pred_y = self.predict(x)\n","\n","    return self.last_layer.forward(pred_y, true_y)\n","\n","  def accuracy(self, x, true_y):\n","    pred_y = self.predict(x)\n","    pred_y = np.argmax(pred_y, axis=1)\n","\n","    if true_y.ndim != 1:\n","      true_y = np.argmax(true_y, axis=1)\n","    \n","    accuracy = np.sum(pred_y == true_y) / float(x.shape[0])\n","    return accuracy\n","  \n","  def gradient(self, x, t):\n","    self.loss(x, t)\n","\n","    dout = 1\n","    dout  = self.last_layer.backward(dout)\n","\n","    layers = list(self.layers.values())\n","    layers.reverse()\n","    for layer in layers:\n","      dout = layer.backward(dout)\n","\n","    grads = {}\n","    for idx in range(1, self.hidden_layer_num + 2):\n","      grads['W' + str(idx)] = self.layers['Layer' + str(idx)].dL_dW\n","      grads['b' + str(idx)] = self.layers['Layer' + str(idx)].dL_db\n","\n","    return grads\n"],"execution_count":79,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LwyNo3TsyDZR"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"Du5naLufxMvv","executionInfo":{"status":"ok","timestamp":1601298663055,"user_tz":-540,"elapsed":635,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["model = MyModel(28*28, [100, 64, 32], 10)"],"execution_count":80,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rb0HhW9x0mrN","executionInfo":{"status":"ok","timestamp":1601298992834,"user_tz":-540,"elapsed":1316,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["train_loss_list = []\n","train_acc_list = []\n","test_acc_list = []"],"execution_count":93,"outputs":[]},{"cell_type":"code","metadata":{"id":"VV5PciwAxM6s","executionInfo":{"status":"ok","timestamp":1601299020179,"user_tz":-540,"elapsed":26203,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"cd9d395f-1fc1-4a73-84d9-2a395c7a1c3e","colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["for epoch in range(epochs):\n","  batch_mask = np.random.choice(train_size, batch_size)\n","  x_batch = X_train[batch_mask]\n","  y_batch = y_train[batch_mask]\n","\n","  grad = model.gradient(x_batch, y_batch)\n","\n","  for key in model.params.keys():\n","    model.params[key] -= learning_rate * grad[key]\n","\n","  loss = model.loss(x_batch, y_batch)\n","  train_loss_list.append(loss)\n","\n","  if epoch % 50 == 0:\n","    train_acc = model.accuracy(X_train,y_train)\n","    test_acc = model.accuracy(X_test, y_test)\n","    train_acc_list.append(train_acc)\n","    test_acc_list.append(test_acc)\n","    print(\"Epoch: {} Train Accuracy: {:.4f} Test Accuracy: {:.4f}\".format(epoch+1, train_acc, test_acc))"],"execution_count":94,"outputs":[{"output_type":"stream","text":["Epoch: 1 Train Accuracy: 0.9255 Test Accuracy: 0.9175\n","Epoch: 51 Train Accuracy: 0.9282 Test Accuracy: 0.9223\n","Epoch: 101 Train Accuracy: 0.9290 Test Accuracy: 0.9252\n","Epoch: 151 Train Accuracy: 0.9308 Test Accuracy: 0.9227\n","Epoch: 201 Train Accuracy: 0.9315 Test Accuracy: 0.9258\n","Epoch: 251 Train Accuracy: 0.9312 Test Accuracy: 0.9238\n","Epoch: 301 Train Accuracy: 0.9229 Test Accuracy: 0.9177\n","Epoch: 351 Train Accuracy: 0.9317 Test Accuracy: 0.9241\n","Epoch: 401 Train Accuracy: 0.9298 Test Accuracy: 0.9235\n","Epoch: 451 Train Accuracy: 0.9320 Test Accuracy: 0.9257\n","Epoch: 501 Train Accuracy: 0.9317 Test Accuracy: 0.9248\n","Epoch: 551 Train Accuracy: 0.9309 Test Accuracy: 0.9252\n","Epoch: 601 Train Accuracy: 0.9324 Test Accuracy: 0.9248\n","Epoch: 651 Train Accuracy: 0.9358 Test Accuracy: 0.9285\n","Epoch: 701 Train Accuracy: 0.9343 Test Accuracy: 0.9295\n","Epoch: 751 Train Accuracy: 0.9333 Test Accuracy: 0.9251\n","Epoch: 801 Train Accuracy: 0.9323 Test Accuracy: 0.9248\n","Epoch: 851 Train Accuracy: 0.9317 Test Accuracy: 0.9213\n","Epoch: 901 Train Accuracy: 0.9359 Test Accuracy: 0.9270\n","Epoch: 951 Train Accuracy: 0.9370 Test Accuracy: 0.9263\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dqqlZOF6KjDl","executionInfo":{"status":"ok","timestamp":1601299025403,"user_tz":-540,"elapsed":1248,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"3bc782c6-0c2b-4e3d-9dc4-45c14488f576","colab":{"base_uri":"https://localhost:8080/","height":308}},"source":["plt.plot(np.arange(1000//50), train_acc_list, 'r--', label='train_acc')\n","plt.plot(np.arange(1000//50), test_acc_list, 'b', label='test_acc')\n","\n","plt.title('Result')\n","plt.xlabel('Epochs')\n","plt.legend(loc=5)\n","plt.grid()\n","plt.show"],"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{"tags":[]},"execution_count":95},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_BwHrt9nP8y8","executionInfo":{"status":"ok","timestamp":1601299036776,"user_tz":-540,"elapsed":1226,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"9e9c0b25-4c38-438f-d452-38075eba34f7","colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["plt.plot(np.arange(1000), train_loss_list, 'green', label='train_loss')\n","plt.title('Train_Loss')\n","plt.xlabel('Epochs')\n","plt.legend(loc=5)\n","plt.grid()\n","plt.show()"],"execution_count":96,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"BOw5MvUgUC7p"},"source":[""],"execution_count":null,"outputs":[]}]}